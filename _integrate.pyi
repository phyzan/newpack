import numpy as np


class OdeResult:

    @property
    def t(self)->np.ndarray:...

    @property
    def q(self)->np.ndarray:...

    @property
    def events(self)->np.ndarray:...

    @property
    def transforms(self)->np.ndarray:...

    @property
    def diverges(self)->bool:...

    @property
    def is_stiff(self)->bool:...

    @property
    def success(self)->bool:...

    @property
    def runtime(self)->float:...

    @property
    def message(self)->str:...

    def examine(self):...


class SolverState:

    @property
    def t(self)->float:...

    @property
    def q(self)->np.ndarray:...

    @property
    def is_event(self)->bool:...

    @property
    def is_transform_event(self)->bool:...

    @property
    def diverges(self)->bool:...

    @property
    def is_stiff(self)->bool:...

    @property
    def is_running(self)->bool:...

    @property
    def is_dead(self)->bool:...

    @property
    def N(self)->int:...

    @property
    def message(self)->str:...

    def show(self):...



class LowLevelODE:

    def __init__(self, f, t0, q0, stepsize, *, rtol=1e-6, atol=1e-12, min_step=0., args=(), method="RK45", event_tol=1e-12, event=None, stopevent=None, check_event=None, check_stop=None, famsk=None, maskevent=None, check_mask=None):...

    def integrate(self, interval, *, max_frames=-1, max_events=-1, terminate=True, display=False)->OdeResult:...

    def advance(self)->SolverState:...

    def state(self)->SolverState:...

    @property
    def t(self)->np.ndarray:...

    @property
    def q(self)->np.ndarray:...

    @property
    def events(self)->np.ndarray:...

    @property
    def transforms(self)->np.ndarray:...

    @property
    def runtime(self)->float:...